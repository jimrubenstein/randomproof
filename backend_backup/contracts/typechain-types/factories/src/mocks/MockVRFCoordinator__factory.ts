/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockVRFCoordinator,
  MockVRFCoordinatorInterface,
} from "../../../src/mocks/MockVRFCoordinator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "preSeed",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "subId",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RandomWordsRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumer",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "fulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumer",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "fulfillRandomWordsWithOverride",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b50610b05806100256000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308e3898e146100465780635d3b1d3014610062578063ca7aefd214610092575b600080fd5b610060600480360381019061005b919061067c565b6100ae565b005b61007c600480360381019061007791906107d7565b61015c565b6040516100899190610861565b60405180910390f35b6100ac60048036038101906100a7919061067c565b6102d9565b005b6100c2670a507d19e347f3ff60c01b610478565b6100d667897294c6af90083160c01b610478565b6100ea6753b108e5dfe283e860c01b610478565b8173ffffffffffffffffffffffffffffffffffffffff16631fe543e384836040518363ffffffff1660e01b815260040161012592919061093a565b600060405180830381600087803b15801561013f57600080fd5b505af1158015610153573d6000803e3d6000fd5b50505050505050565b6000610172676575c6a4a2a74bd460c01b610478565b6101866788f648523a2c2b4960c01b610478565b61019a678c0536fbb69952e460c01b610478565b60008060008154809291906101ae90610999565b9190505590506101c867a969f4e1359bb22e60c01b610478565b336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061022e67de9ac9bde10f058c60c01b610478565b6102426741c44b7b5975408660c01b610478565b3373ffffffffffffffffffffffffffffffffffffffff168667ffffffffffffffff16887f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977284428a8a8a60405161029c9594939291906109ff565b60405180910390a46102b867385895d7bf91578760c01b610478565b6102cc67b562e2246c90f7ae60c01b610478565b8091505095945050505050565b6102ed67c9c63c7057f3cc8860c01b610478565b6103016720276afe53a6135c60c01b610478565b61031567a237d86ae93c633160c01b610478565b6103296789c87cf773b5998e60c01b610478565b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c190610aaf565b60405180910390fd5b6103de67d26030a00deb1bd960c01b610478565b6103f267df72c2236996e2d460c01b610478565b61040667807b95576164c92160c01b610478565b8173ffffffffffffffffffffffffffffffffffffffff16631fe543e384836040518363ffffffff1660e01b815260040161044192919061093a565b600060405180830381600087803b15801561045b57600080fd5b505af115801561046f573d6000803e3d6000fd5b50505050505050565b50565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6104a28161048f565b81146104ad57600080fd5b50565b6000813590506104bf81610499565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104f0826104c5565b9050919050565b610500816104e5565b811461050b57600080fd5b50565b60008135905061051d816104f7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61057182610528565b810181811067ffffffffffffffff821117156105905761058f610539565b5b80604052505050565b60006105a361047b565b90506105af8282610568565b919050565b600067ffffffffffffffff8211156105cf576105ce610539565b5b602082029050602081019050919050565b600080fd5b60006105f86105f3846105b4565b610599565b9050808382526020820190506020840283018581111561061b5761061a6105e0565b5b835b81811015610644578061063088826104b0565b84526020840193505060208101905061061d565b5050509392505050565b600082601f83011261066357610662610523565b5b81356106738482602086016105e5565b91505092915050565b60008060006060848603121561069557610694610485565b5b60006106a3868287016104b0565b93505060206106b48682870161050e565b925050604084013567ffffffffffffffff8111156106d5576106d461048a565b5b6106e18682870161064e565b9150509250925092565b6000819050919050565b6106fe816106eb565b811461070957600080fd5b50565b60008135905061071b816106f5565b92915050565b600067ffffffffffffffff82169050919050565b61073e81610721565b811461074957600080fd5b50565b60008135905061075b81610735565b92915050565b600061ffff82169050919050565b61077881610761565b811461078357600080fd5b50565b6000813590506107958161076f565b92915050565b600063ffffffff82169050919050565b6107b48161079b565b81146107bf57600080fd5b50565b6000813590506107d1816107ab565b92915050565b600080600080600060a086880312156107f3576107f2610485565b5b60006108018882890161070c565b95505060206108128882890161074c565b945050604061082388828901610786565b9350506060610834888289016107c2565b9250506080610845888289016107c2565b9150509295509295909350565b61085b8161048f565b82525050565b60006020820190506108766000830184610852565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6108b18161048f565b82525050565b60006108c383836108a8565b60208301905092915050565b6000602082019050919050565b60006108e78261087c565b6108f18185610887565b93506108fc83610898565b8060005b8381101561092d57815161091488826108b7565b975061091f836108cf565b925050600181019050610900565b5085935050505092915050565b600060408201905061094f6000830185610852565b818103602083015261096181846108dc565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109a48261048f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109d6576109d561096a565b5b600182019050919050565b6109ea81610761565b82525050565b6109f98161079b565b82525050565b600060a082019050610a146000830188610852565b610a216020830187610852565b610a2e60408301866109e1565b610a3b60608301856109f0565b610a4860808301846109f0565b9695505050505050565b600082825260208201905092915050565b7f496e76616c696420636f6e73756d657200000000000000000000000000000000600082015250565b6000610a99601083610a52565b9150610aa482610a63565b602082019050919050565b60006020820190508181036000830152610ac881610a8c565b905091905056fea2646970667358221220f79a4042eb4c166adb9bd80b5d3b5f15d5555f6e4577fc211c9c9a6a384f030364736f6c63430008130033";

type MockVRFCoordinatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVRFCoordinatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVRFCoordinator__factory extends ContractFactory {
  constructor(...args: MockVRFCoordinatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockVRFCoordinator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockVRFCoordinator__factory {
    return super.connect(runner) as MockVRFCoordinator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVRFCoordinatorInterface {
    return new Interface(_abi) as MockVRFCoordinatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockVRFCoordinator {
    return new Contract(address, _abi, runner) as unknown as MockVRFCoordinator;
  }
}
