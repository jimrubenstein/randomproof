/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  VRFCoordinatorV2PlusMock,
  VRFCoordinatorV2PlusMockInterface,
} from "../../../src/mocks/VRFCoordinatorV2PlusMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "outputSeed",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "subId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "payment",
        type: "uint96",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "onlyPremium",
        type: "bool",
      },
    ],
    name: "RandomWordsFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "preSeed",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "subId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraArgs",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "RandomWordsRequested",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumer",
        type: "address",
      },
    ],
    name: "addConsumer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "createSubscription",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumer",
        type: "address",
      },
    ],
    name: "fulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "consumer",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "fulfillRandomWordsWithOverride",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subId",
        type: "uint256",
      },
      {
        internalType: "uint96",
        name: "amount",
        type: "uint96",
      },
    ],
    name: "fundSubscription",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "subId",
        type: "uint256",
      },
    ],
    name: "getSubscription",
    outputs: [
      {
        internalType: "uint96",
        name: "balance",
        type: "uint96",
      },
      {
        internalType: "uint64",
        name: "reqCount",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "consumers",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subId",
        type: "uint64",
      },
      {
        internalType: "uint16",
        name: "minimumRequestConfirmations",
        type: "uint16",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600160005534801561001557600080fd5b50611828806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063808974ff1161005b578063808974ff146100ea578063a21a23e414610106578063bec4c08c14610124578063dc311dd3146101405761007d565b806308e3898e146100825780634cf94d871461009e5780635d3b1d30146100ba575b600080fd5b61009c60048036038101906100979190610fc0565b610173565b005b6100b860048036038101906100b39190611073565b610527565b005b6100d460048036038101906100cf919061119f565b6105be565b6040516100e19190611229565b60405180910390f35b61010460048036038101906100ff9190611244565b6107ba565b005b61010e61084e565b60405161011b9190611229565b60405180910390f35b61013e60048036038101906101399190611244565b610a4e565b005b61015a60048036038101906101559190611284565b610b05565b60405161016a949392919061139c565b60405180910390f35b610187679d7cd5b0f23d893c60c01b610d0a565b61019b6797c2ff56ebd90eb260c01b610d0a565b6101af6704cd3cf4fb360add60c01b610d0a565b6101c36792b9ebf8d384857f60c01b610d0a565b8173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561024157506102406794de964d01f2bb2c60c01b610d0d565b5b806102955750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610294575061029367b862ce5abcf38a3e60c01b610d0d565b5b5b6102d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cb90611445565b60405180910390fd5b6102e867bd12499aea30004460c01b610d0a565b6102fc679fd09e1b984dfa1460c01b610d0a565b610310675f4ea78e49eb377d60c01b610d0a565b60008151036103f25761032d675ed33da9402060fc60c01b610d0a565b6103416776a6b2f8a571a3c960c01b610d0a565b600167ffffffffffffffff81111561035c5761035b610e7d565b5b60405190808252806020026020018201604052801561038a5781602001602082028036833780820191505090505b5090506103a16759a4cc20ac9790c860c01b610d0a565b82426040516020016103b4929190611465565b6040516020818303038152906040528051906020012060001c816000815181106103e1576103e061148e565b5b602002602001018181525050610407565b6104066729e58735e2f4e26260c01b610d0a565b5b61041b67682356a2ce535cac60c01b610d0a565b61042f677f9a82571ed2c3ab60c01b610d0a565b8173ffffffffffffffffffffffffffffffffffffffff16631fe543e384836040518363ffffffff1660e01b815260040161046a92919061157b565b600060405180830381600087803b15801561048457600080fd5b505af1158015610498573d6000803e3d6000fd5b505050506104b0676aefdbc662d9366160c01b610d0a565b6104c4671fc280071aadd12760c01b610d0a565b6000837f6c6b5394380e16e41988d8383648010de6f5c2e4814803be5de1c6b1c852db55836000815181106104fc576104fb61148e565b5b602002602001015160006001600060405161051a949392919061160b565b60405180910390a3505050565b61053b679b20e9a2614dfe6f60c01b610d0a565b61054f6717420fca18967b2d60c01b610d0a565b806002600084815260200190815260200160002060000160008282829054906101000a90046bffffffffffffffffffffffff1661058c919061167f565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505050565b60006105d467628537b761d4345060c01b610d0a565b6105e8679d4e4813ae33f38660c01b610d0a565b6105fc676bcaffe3116e49c660c01b610d0a565b6000806000815480929190610610906116bf565b91905055905061062a67423612654ff3f35560c01b610d0a565b336001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061069067276d6eb4430a69f860c01b610d0a565b6106a4674564abe81c84af9f60c01b610d0a565b3373ffffffffffffffffffffffffffffffffffffffff168667ffffffffffffffff16887feb0e3652e0f44f417695e6e90f2f42c99b65cd7169074c5a654b16b9748c3a4e84428a8a8a6040516106fe95949392919061175c565b60405180910390a461071a67a87c31e5185cd8f460c01b610d0a565b600260008767ffffffffffffffff168152602001908152602001600020600001600c81819054906101000a900467ffffffffffffffff168092919061075e906117c2565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505061079967f0defbd62a2f840260c01b610d0a565b6107ad67eb003413c3f30e8f60c01b610d0a565b8091505095945050505050565b6107ce67144b0486afdf626d60c01b610d0a565b6107e2678029f4dc842eb76a60c01b610d0a565b6107f667cc6c30f6dbcccb6a60c01b610d0a565b61084a8282600167ffffffffffffffff81111561081657610815610e7d565b5b6040519080825280602002602001820160405280156108445781602001602082028036833780820191505090505b50610173565b5050565b6000610864673cbc1dfd256276d860c01b610d0a565b6108786786e2f5079925d1db60c01b610d0a565b61088c679ea084c542655adf60c01b610d0a565b60004290506108a5675bfef2cfe1b1a01560c01b610d0a565b604051806080016040528060006bffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff81111561090d5761090c610e7d565b5b60405190808252806020026020018201604052801561093b5781602001602082028036833780820191505090505b508152506002600083815260200190815260200160002060008201518160000160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550602082015181600001600c6101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816002019080519060200190610a1b929190610d18565b50905050610a33676ec2a8f92be35bef60c01b610d0a565b610a4767c047750255b5395460c01b610d0a565b8091505090565b610a62670feb311cbc06d5bf60c01b610d0a565b610a7667ca2deb360b17d38660c01b610d0a565b610a8a67906edbdd4f2a5d0e60c01b610d0a565b60026000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008060006060610b2067a106457987e4360f60c01b610d0a565b610b34675c2515ff5622aae360c01b610d0a565b610b486775ef0b43788af91360c01b610d0a565b6000600260008781526020019081526020016000206040518060800160405290816000820160009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff16815260200160008201600c9054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805480602002602001604051908101604052809291908181526020018280548015610cb357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c69575b5050505050815250509050610cd26743e0a74ba7fe85a060c01b610d0a565b610ce667f3fa12e0572d807460c01b610d0a565b80600001518160200151826040015183606001519450945094509450509193509193565b50565b600060019050919050565b828054828255906000526020600020908101928215610d91579160200282015b82811115610d905782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d38565b5b509050610d9e9190610da2565b5090565b5b80821115610dbb576000816000905550600101610da3565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610de681610dd3565b8114610df157600080fd5b50565b600081359050610e0381610ddd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3482610e09565b9050919050565b610e4481610e29565b8114610e4f57600080fd5b50565b600081359050610e6181610e3b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610eb582610e6c565b810181811067ffffffffffffffff82111715610ed457610ed3610e7d565b5b80604052505050565b6000610ee7610dbf565b9050610ef38282610eac565b919050565b600067ffffffffffffffff821115610f1357610f12610e7d565b5b602082029050602081019050919050565b600080fd5b6000610f3c610f3784610ef8565b610edd565b90508083825260208201905060208402830185811115610f5f57610f5e610f24565b5b835b81811015610f885780610f748882610df4565b845260208401935050602081019050610f61565b5050509392505050565b600082601f830112610fa757610fa6610e67565b5b8135610fb7848260208601610f29565b91505092915050565b600080600060608486031215610fd957610fd8610dc9565b5b6000610fe786828701610df4565b9350506020610ff886828701610e52565b925050604084013567ffffffffffffffff81111561101957611018610dce565b5b61102586828701610f92565b9150509250925092565b60006bffffffffffffffffffffffff82169050919050565b6110508161102f565b811461105b57600080fd5b50565b60008135905061106d81611047565b92915050565b6000806040838503121561108a57611089610dc9565b5b600061109885828601610df4565b92505060206110a98582860161105e565b9150509250929050565b6000819050919050565b6110c6816110b3565b81146110d157600080fd5b50565b6000813590506110e3816110bd565b92915050565b600067ffffffffffffffff82169050919050565b611106816110e9565b811461111157600080fd5b50565b600081359050611123816110fd565b92915050565b600061ffff82169050919050565b61114081611129565b811461114b57600080fd5b50565b60008135905061115d81611137565b92915050565b600063ffffffff82169050919050565b61117c81611163565b811461118757600080fd5b50565b60008135905061119981611173565b92915050565b600080600080600060a086880312156111bb576111ba610dc9565b5b60006111c9888289016110d4565b95505060206111da88828901611114565b94505060406111eb8882890161114e565b93505060606111fc8882890161118a565b925050608061120d8882890161118a565b9150509295509295909350565b61122381610dd3565b82525050565b600060208201905061123e600083018461121a565b92915050565b6000806040838503121561125b5761125a610dc9565b5b600061126985828601610df4565b925050602061127a85828601610e52565b9150509250929050565b60006020828403121561129a57611299610dc9565b5b60006112a884828501610df4565b91505092915050565b6112ba8161102f565b82525050565b6112c9816110e9565b82525050565b6112d881610e29565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61131381610e29565b82525050565b6000611325838361130a565b60208301905092915050565b6000602082019050919050565b6000611349826112de565b61135381856112e9565b935061135e836112fa565b8060005b8381101561138f5781516113768882611319565b975061138183611331565b925050600181019050611362565b5085935050505092915050565b60006080820190506113b160008301876112b1565b6113be60208301866112c0565b6113cb60408301856112cf565b81810360608301526113dd818461133e565b905095945050505050565b600082825260208201905092915050565b7f496e76616c696420636f6e73756d657200000000000000000000000000000000600082015250565b600061142f6010836113e8565b915061143a826113f9565b602082019050919050565b6000602082019050818103600083015261145e81611422565b9050919050565b600060408201905061147a600083018561121a565b611487602083018461121a565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6114f281610dd3565b82525050565b600061150483836114e9565b60208301905092915050565b6000602082019050919050565b6000611528826114bd565b61153281856114c8565b935061153d836114d9565b8060005b8381101561156e57815161155588826114f8565b975061156083611510565b925050600181019050611541565b5085935050505092915050565b6000604082019050611590600083018561121a565b81810360208301526115a2818461151d565b90509392505050565b6000819050919050565b6000819050919050565b60006115da6115d56115d0846115ab565b6115b5565b61102f565b9050919050565b6115ea816115bf565b82525050565b60008115159050919050565b611605816115f0565b82525050565b6000608082019050611620600083018761121a565b61162d60208301866115e1565b61163a60408301856115fc565b61164760608301846115fc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061168a8261102f565b91506116958361102f565b925082820190506bffffffffffffffffffffffff8111156116b9576116b8611650565b5b92915050565b60006116ca82610dd3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116fc576116fb611650565b5b600182019050919050565b61171081611129565b82525050565b61171f81611163565b82525050565b600082825260208201905092915050565b50565b6000611746600083611725565b915061175182611736565b600082019050919050565b600060c082019050611771600083018861121a565b61177e602083018761121a565b61178b6040830186611707565b6117986060830185611716565b6117a56080830184611716565b81810360a08301526117b681611739565b90509695505050505050565b60006117cd826110e9565b915067ffffffffffffffff82036117e7576117e6611650565b5b60018201905091905056fea264697066735822122052af74bb10d8fdd38add1a24261ef307dff87b36f929b7841ee496a4a3f5f11c64736f6c63430008130033";

type VRFCoordinatorV2PlusMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VRFCoordinatorV2PlusMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VRFCoordinatorV2PlusMock__factory extends ContractFactory {
  constructor(...args: VRFCoordinatorV2PlusMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VRFCoordinatorV2PlusMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): VRFCoordinatorV2PlusMock__factory {
    return super.connect(runner) as VRFCoordinatorV2PlusMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VRFCoordinatorV2PlusMockInterface {
    return new Interface(_abi) as VRFCoordinatorV2PlusMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VRFCoordinatorV2PlusMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as VRFCoordinatorV2PlusMock;
  }
}
