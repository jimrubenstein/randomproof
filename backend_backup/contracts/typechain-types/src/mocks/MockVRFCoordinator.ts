/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockVRFCoordinatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fulfillRandomWords"
      | "fulfillRandomWordsWithOverride"
      | "requestRandomWords"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RandomWordsRequested"): EventFragment;

  encodeFunctionData(
    functionFragment: "fulfillRandomWords",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWordsWithOverride",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "fulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWordsWithOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
}

export namespace RandomWordsRequestedEvent {
  export type InputTuple = [
    keyHash: BytesLike,
    requestId: BigNumberish,
    preSeed: BigNumberish,
    subId: BigNumberish,
    minimumRequestConfirmations: BigNumberish,
    callbackGasLimit: BigNumberish,
    numWords: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    keyHash: string,
    requestId: bigint,
    preSeed: bigint,
    subId: bigint,
    minimumRequestConfirmations: bigint,
    callbackGasLimit: bigint,
    numWords: bigint,
    sender: string
  ];
  export interface OutputObject {
    keyHash: string;
    requestId: bigint;
    preSeed: bigint;
    subId: bigint;
    minimumRequestConfirmations: bigint;
    callbackGasLimit: bigint;
    numWords: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockVRFCoordinator extends BaseContract {
  connect(runner?: ContractRunner | null): MockVRFCoordinator;
  waitForDeployment(): Promise<this>;

  interface: MockVRFCoordinatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fulfillRandomWords: TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  fulfillRandomWordsWithOverride: TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  requestRandomWords: TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fulfillRandomWords"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillRandomWordsWithOverride"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "RandomWordsRequested"
  ): TypedContractEvent<
    RandomWordsRequestedEvent.InputTuple,
    RandomWordsRequestedEvent.OutputTuple,
    RandomWordsRequestedEvent.OutputObject
  >;

  filters: {
    "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)": TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;
    RandomWordsRequested: TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;
  };
}
