/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VRFCoordinatorV2MockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "fulfillRandomWords"
      | "fulfillRandomWordsWithOverride"
      | "fundSubscription"
      | "getRequestConfig"
      | "getSubscription"
      | "pendingRequestExists"
      | "removeConsumer"
      | "requestRandomWords"
      | "requestSubscriptionOwnerTransfer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RandomWordsFulfilled"
      | "RandomWordsRequested"
      | "SubscriptionConsumerAdded"
      | "SubscriptionCreated"
      | "SubscriptionFunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWords",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillRandomWordsWithOverride",
    values: [BigNumberish, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubscription",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillRandomWordsWithOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
}

export namespace RandomWordsFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    outputSeed: BigNumberish,
    payment: BigNumberish,
    success: boolean
  ];
  export type OutputTuple = [
    requestId: bigint,
    outputSeed: bigint,
    payment: bigint,
    success: boolean
  ];
  export interface OutputObject {
    requestId: bigint;
    outputSeed: bigint;
    payment: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomWordsRequestedEvent {
  export type InputTuple = [
    keyHash: BytesLike,
    requestId: BigNumberish,
    preSeed: BigNumberish,
    subId: BigNumberish,
    minimumRequestConfirmations: BigNumberish,
    callbackGasLimit: BigNumberish,
    numWords: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    keyHash: string,
    requestId: bigint,
    preSeed: bigint,
    subId: bigint,
    minimumRequestConfirmations: bigint,
    callbackGasLimit: bigint,
    numWords: bigint,
    sender: string
  ];
  export interface OutputObject {
    keyHash: string;
    requestId: bigint;
    preSeed: bigint;
    subId: bigint;
    minimumRequestConfirmations: bigint;
    callbackGasLimit: bigint;
    numWords: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerAddedEvent {
  export type InputTuple = [subId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [subId: bigint, consumer: string];
  export interface OutputObject {
    subId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [subId: bigint, owner: string];
  export interface OutputObject {
    subId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedEvent {
  export type InputTuple = [
    subId: BigNumberish,
    oldBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    oldBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    oldBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VRFCoordinatorV2Mock extends BaseContract {
  connect(runner?: ContractRunner | null): VRFCoordinatorV2Mock;
  waitForDeployment(): Promise<this>;

  interface: VRFCoordinatorV2MockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelSubscription: TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  fulfillRandomWords: TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  fulfillRandomWordsWithOverride: TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  fundSubscription: TypedContractMethod<
    [subId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRequestConfig: TypedContractMethod<
    [],
    [[bigint, bigint, string[]]],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        balance: bigint;
        reqCount: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  pendingRequestExists: TypedContractMethod<
    [subId: BigNumberish],
    [boolean],
    "view"
  >;

  removeConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  requestRandomWords: TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  requestSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "fulfillRandomWords"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fulfillRandomWordsWithOverride"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      consumer: AddressLike,
      randomWords: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRequestConfig"
  ): TypedContractMethod<[], [[bigint, bigint, string[]]], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        balance: bigint;
        reqCount: bigint;
        owner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandomWords"
  ): TypedContractMethod<
    [
      keyHash: BytesLike,
      subId: BigNumberish,
      minimumRequestConfirmations: BigNumberish,
      callbackGasLimit: BigNumberish,
      numWords: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RandomWordsFulfilled"
  ): TypedContractEvent<
    RandomWordsFulfilledEvent.InputTuple,
    RandomWordsFulfilledEvent.OutputTuple,
    RandomWordsFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomWordsRequested"
  ): TypedContractEvent<
    RandomWordsRequestedEvent.InputTuple,
    RandomWordsRequestedEvent.OutputTuple,
    RandomWordsRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerAdded"
  ): TypedContractEvent<
    SubscriptionConsumerAddedEvent.InputTuple,
    SubscriptionConsumerAddedEvent.OutputTuple,
    SubscriptionConsumerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFunded"
  ): TypedContractEvent<
    SubscriptionFundedEvent.InputTuple,
    SubscriptionFundedEvent.OutputTuple,
    SubscriptionFundedEvent.OutputObject
  >;

  filters: {
    "RandomWordsFulfilled(uint256,uint256,uint96,bool)": TypedContractEvent<
      RandomWordsFulfilledEvent.InputTuple,
      RandomWordsFulfilledEvent.OutputTuple,
      RandomWordsFulfilledEvent.OutputObject
    >;
    RandomWordsFulfilled: TypedContractEvent<
      RandomWordsFulfilledEvent.InputTuple,
      RandomWordsFulfilledEvent.OutputTuple,
      RandomWordsFulfilledEvent.OutputObject
    >;

    "RandomWordsRequested(bytes32,uint256,uint256,uint64,uint16,uint32,uint32,address)": TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;
    RandomWordsRequested: TypedContractEvent<
      RandomWordsRequestedEvent.InputTuple,
      RandomWordsRequestedEvent.OutputTuple,
      RandomWordsRequestedEvent.OutputObject
    >;

    "SubscriptionConsumerAdded(uint64,address)": TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;
    SubscriptionConsumerAdded: TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;

    "SubscriptionCreated(uint64,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionFunded(uint64,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
    SubscriptionFunded: TypedContractEvent<
      SubscriptionFundedEvent.InputTuple,
      SubscriptionFundedEvent.OutputTuple,
      SubscriptionFundedEvent.OutputObject
    >;
  };
}
