/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace RandomProof {
  export type RandomnessRequestStruct = {
    entityHash: string;
    salt: string;
    randomness: BigNumberish;
    fulfilled: boolean;
    requester: AddressLike;
    requestBlock: BigNumberish;
    fulfilledBlock: BigNumberish;
  };

  export type RandomnessRequestStructOutput = [
    entityHash: string,
    salt: string,
    randomness: bigint,
    fulfilled: boolean,
    requester: string,
    requestBlock: bigint,
    fulfilledBlock: bigint
  ] & {
    entityHash: string;
    salt: string;
    randomness: bigint;
    fulfilled: boolean;
    requester: string;
    requestBlock: bigint;
    fulfilledBlock: bigint;
  };
}

export interface RandomProofInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getRandomnessForEntityHash"
      | "getRequestDetails"
      | "getRequestIdForEntityHash"
      | "isEntityHashProcessed"
      | "rawFulfillRandomWords"
      | "requestRandomness"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RandomnessFulfilled" | "RandomnessRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getRandomnessForEntityHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestIdForEntityHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isEntityHashProcessed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomness",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getRandomnessForEntityHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestIdForEntityHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEntityHashProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomness",
    data: BytesLike
  ): Result;
}

export namespace RandomnessFulfilledEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    entityHash: string,
    randomness: BigNumberish,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    entityHash: string,
    randomness: bigint,
    blockNumber: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    entityHash: string;
    randomness: bigint;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RandomnessRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    entityHash: string,
    salt: string,
    requester: AddressLike,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    entityHash: string,
    salt: string,
    requester: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    entityHash: string;
    salt: string;
    requester: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RandomProof extends BaseContract {
  connect(runner?: ContractRunner | null): RandomProof;
  waitForDeployment(): Promise<this>;

  interface: RandomProofInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRandomnessForEntityHash: TypedContractMethod<
    [entityHash: string],
    [[bigint, boolean] & { randomness: bigint; fulfilled: boolean }],
    "view"
  >;

  getRequestDetails: TypedContractMethod<
    [requestId: BigNumberish],
    [RandomProof.RandomnessRequestStructOutput],
    "view"
  >;

  getRequestIdForEntityHash: TypedContractMethod<
    [entityHash: string],
    [bigint],
    "view"
  >;

  isEntityHashProcessed: TypedContractMethod<
    [entityHash: string],
    [boolean],
    "view"
  >;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  requestRandomness: TypedContractMethod<
    [entityHash: string, salt: string],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRandomnessForEntityHash"
  ): TypedContractMethod<
    [entityHash: string],
    [[bigint, boolean] & { randomness: bigint; fulfilled: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestDetails"
  ): TypedContractMethod<
    [requestId: BigNumberish],
    [RandomProof.RandomnessRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRequestIdForEntityHash"
  ): TypedContractMethod<[entityHash: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEntityHashProcessed"
  ): TypedContractMethod<[entityHash: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestRandomness"
  ): TypedContractMethod<
    [entityHash: string, salt: string],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "RandomnessFulfilled"
  ): TypedContractEvent<
    RandomnessFulfilledEvent.InputTuple,
    RandomnessFulfilledEvent.OutputTuple,
    RandomnessFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RandomnessRequested"
  ): TypedContractEvent<
    RandomnessRequestedEvent.InputTuple,
    RandomnessRequestedEvent.OutputTuple,
    RandomnessRequestedEvent.OutputObject
  >;

  filters: {
    "RandomnessFulfilled(uint256,string,uint256,uint256)": TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;
    RandomnessFulfilled: TypedContractEvent<
      RandomnessFulfilledEvent.InputTuple,
      RandomnessFulfilledEvent.OutputTuple,
      RandomnessFulfilledEvent.OutputObject
    >;

    "RandomnessRequested(uint256,string,string,address,uint256)": TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
    RandomnessRequested: TypedContractEvent<
      RandomnessRequestedEvent.InputTuple,
      RandomnessRequestedEvent.OutputTuple,
      RandomnessRequestedEvent.OutputObject
    >;
  };
}
